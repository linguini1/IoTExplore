#include "arduino_secrets.h"
#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/e8dfb47b-15b6-4826-8c68-13b7bb0353ca 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  CloudColoredLight rgb;
  int screenColor;
  int soundDuration;
  int soundFrequency;
  int textSize;
  bool soundOn;
  bool warningAlarm;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  // Set up case
  carrier.noCase();
  carrier.begin();

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  while(ArduinoCloud.connected() != 1){
    ArduinoCloud.update();
    carrier.display.setTextSize(3);
    carrier.display.setCursor(20, 70);
    carrier.display.println("Waiting for");
    carrier.display.setCursor(5, 110);
    carrier.display.println("connection...");
    delay(500);
  }

  carrier.display.fillScreen(ST77XX_BLACK);
  carrier.display.setCursor(20, 70);
  carrier.display.println("Connection");
  carrier.display.setCursor(5, 110);
  carrier.display.println("established.");
  delay(500);

}

void loop() {
  ArduinoCloud.update();
  
  if (warningAlarm) {
    alarm();
  }

  carrier.display.setCursor(5, 100);
  
  if (soundOn) {
    carrier.Buzzer.sound(soundFrequency);
    delay(soundDuration);
    carrier.Buzzer.noSound();
    delay(soundDuration);
  }
  
}

void alarm(){
  carrier.display.fillScreen(ST77XX_RED); // Set the background color of the screen to red
  carrier.display.setTextColor(ST77XX_WHITE); // Set the color of the text to white
  carrier.display.setTextSize(3); // Set the size of the text to 3 (medium)
  carrier.display.setCursor(50, 100); // Set the cursor at position x=50, y=100
  carrier.display.print("WARNING!"); // Display "WARNING!" on the screen
  carrier.Buzzer.sound(1000); // Turn on the sound buzzer with frequency=1000
  
  delay(1000);

  carrier.display.fillScreen(ST77XX_WHITE); // Set the background color of the screen to white
  carrier.display.setTextColor(ST77XX_RED); // Set the color of the text to red
  carrier.display.setCursor(50, 100); // Set the cursor at position x=50, y=100
  carrier.display.print("WARNING!"); // Display "WARNING!" on the screen
  carrier.Buzzer.noSound();  // Turn off the sound buzzer
  
  delay(1000);
  
  carrier.display.fillScreen(ST77XX_WHITE); // Set screen to white
  carrier.display.setTextColor(ST77XX_WHITE); // Set text to white
}


void backgroundColour() {

  uint16_t bg;
  uint16_t text = ST77XX_WHITE;

  switch (screenColor){
    case 0:
      bg = ST77XX_BLACK;
      break;
    case 1:
      bg = ST77XX_RED;
      break;
    case 2:
      bg = ST77XX_YELLOW;
      text = ST77XX_BLACK;
      break;
    case 3:
      bg = ST77XX_ORANGE;
      break;
    case 4:
      bg = ST77XX_GREEN;
      text = ST77XX_BLACK;
      break;
    case 5:
      bg = ST77XX_BLUE;
      break;
    case 6:
      bg = ST77XX_MAGENTA;
      break;
  }

  carrier.display.fillScreen(bg);
  carrier.display.setTextColor(text);
}


/*
  Since Message is READ_WRITE variable, onMessageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMessageChange()  {
  backgroundColour();
  carrier.display.setTextSize(textSize);
  carrier.display.println(message);
  Serial.println(message);
}

/*
  Since ScreenColor is READ_WRITE variable, onScreenColorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onScreenColorChange()  {
  backgroundColour();
  carrier.display.setTextSize(textSize);
  carrier.display.println(message);
}

/*
  Since SoundDuration is READ_WRITE variable, onSoundDurationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoundDurationChange()  {
  // Unused
}

/*
  Since SoundFrequency is READ_WRITE variable, onSoundFrequencyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoundFrequencyChange()  {
  // Unused
}

/*
  Since SoundOn is READ_WRITE variable, onSoundOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoundOnChange()  {
  // Unused
}

/*
  Since TextSize is READ_WRITE variable, onTextSizeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTextSizeChange()  {
  backgroundColour();
  carrier.display.setTextSize(textSize);
  carrier.display.println(message);
}

/*
  Since WarningAlarm is READ_WRITE variable, onWarningAlarmChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWarningAlarmChange()  {
  // Unused
}

/*
  Since Rgb is READ_WRITE variable, onRgbChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRgbChange()  {
  uint8_t r, g, b;
  rgb.getValue().getRGB(r, g, b);

  if (rgb.getSwitch()){
    for (int i = 0; i <= 4; i++){
      carrier.leds.setPixelColor(i, r, g, b);
    }
    carrier.leds.show();
  } else {
    turnOffRGB();
    carrier.leds.show();
  }

}

void turnOffRGB(){
  for (int i = 0; i <= 4; i++){
      carrier.leds.setPixelColor(i, 0);
    }
}
